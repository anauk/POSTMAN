{
	"info": {
		"_postman_id": "30b4e6f0-2311-448a-9888-ae3d80ce68df",
		"name": "swapi_tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "https://swapi.co/api/people/1",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a6ec7128-ec15-41fd-afd8-4be09cd251a8",
						"exec": [
							"// var data = JSON.parse(responseBody);",
							"// var schema = {",
							"//     //specify the type of object",
							"//     \"type\": \"object\",",
							"//     //specify requires properties",
							"//     \"required\": [\"people\", \"planets\", \"films\",\"species\",\"vehicles\", \"starships\"],",
							"//     //describe the properties",
							"//     \"properties\" : {",
							"//         \"people\": {\"type\": \"string\"},",
							"//         \"planets\": {\"type\": \"string\"},",
							"//         \"films\": {\"type\": \"string\"},",
							"//         \"specie\": {\"type\": \"string\"},",
							"//         \"vehicles\": {\"type\": \"string\"},",
							"//         \"starships\": {\"type\": \"string\"}",
							"//     }",
							"// };",
							"// pm.test(\"Body is correct\", function(){",
							"//     pm.expect(tv4.validate(data, schema)).to.be.true;",
							"// });",
							"var data = JSON.parse(responseBody);",
							"var schema = {",
							"    \"type\": \"object\",",
							"    \"required\": [\"name\", \"homeworld\", \"films\", \"species\", \"vehicles\", \"starships\"],",
							"    \"property\": {",
							"        \"name\": {\"type\": \"string\"},",
							"        \"homeworld\": {\"type\": \"string\"},",
							"        \"films\": {",
							"            \"type\": \"array\",",
							"            \"items\": {\"type\": \"string\"}",
							"        },",
							"        \"species\": {",
							"            \"type\": \"array\",",
							"            \"items\": {\"type\": \"string\"}",
							"        },",
							"        \"vehicles\": {",
							"            \"type\": \"array\",",
							"            \"items\": {\"type\": \"string\"}",
							"        },",
							"        \"starships\": {",
							"            \"type\": \"array\",",
							"            \"items\": {\"type\": \"string\"}",
							"        }",
							"    }",
							"}",
							"pm.test(\"Body is correct\", function(){",
							"    pm.expect(tv4.validate(data, schema)).to.be.true;",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://swapi.co/api/people/1",
					"protocol": "https",
					"host": [
						"swapi",
						"co"
					],
					"path": [
						"api",
						"people",
						"1"
					]
				},
				"description": "swapi_test"
			},
			"response": []
		},
		{
			"name": "https://swapi.co/api/",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "ad2fd43d-caf4-42ec-b524-c9aa3658fb1c",
						"exec": [
							"//1. Correct response format JSON",
							"pm.test(\"Correct response format JSON\", function(){",
							"    pm.response.to.have.jsonBody()",
							"});",
							"",
							"//2. We have all the declared fields in the response",
							"pm.test(\"Check that we have all declared fields\", function(){",
							"    var jsoneData = pm.response.json();",
							"    ",
							"    pm.expect(jsoneData).to.have.property(\"people\");",
							"    pm.expect(jsoneData).to.have.property(\"planets\");",
							"    pm.expect(jsoneData).to.have.property(\"films\");",
							"    pm.expect(jsoneData).to.have.property(\"species\");",
							"    pm.expect(jsoneData).to.have.property(\"vehicles\");",
							"    pm.expect(jsoneData).to.have.property(\"starships\");",
							"});",
							"//3. Field value is not NALL",
							"pm.test(\"Check if value isn't NULL\", function(){",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.people).not.equal(null);",
							"    pm.expect(jsonData.planets).not.equal(null);",
							"    pm.expect(jsonData.films).not.equal(null);",
							"    pm.expect(jsonData.species).not.equal(null);",
							"    pm.expect(jsonData.vehicles).not.equal(null);",
							"    pm.expect(jsonData.starships).not.equal(null);",
							"});",
							"//4. Field value isn't empty",
							"pm.test(\"Chack if value isn't empty\", function(){",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.people).not.equal('');",
							"    pm.expect(jsonData.planets).not.equal('');",
							"    pm.expect(jsonData.films).not.equal('');",
							"    pm.expect(jsonData.species).not.equal('');",
							"    pm.expect(jsonData.vehicles).not.equal('');",
							"    pm.expect(jsonData.starships).not.equal('');",
							"});",
							"//5. Check if fields corresponds to a specific value",
							"pm.test(\"Check if fields corresponds to a specific value\", function(){",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.people).to.equal(\"https://swapi.co/api/people/\");",
							"    pm.expect(jsonData.planets).to.equal(\"https://swapi.co/api/planets/\");",
							"    pm.expect(jsonData.films).to.equal(\"https://swapi.co/api/films/\");",
							"    pm.expect(jsonData.species).to.equal(\"https://swapi.co/api/species/\");",
							"    pm.expect(jsonData.vehicles).to.equal(\"https://swapi.co/api/vehicles/\");",
							"    pm.expect(jsonData.starships).to.equal(\"https://swapi.co/api/starships/\");",
							"});",
							"//6. Status code is 200",
							"pm.test(\"Status code is 200\", function(){",
							"    pm.response.to.have.status(200);",
							"});",
							"//7. Status messageis ok ",
							"pm.test(\"Status messageis ok\", function(){",
							"    pm.response.to.have.status(\"OK\");",
							"});",
							"//8. Response time is less than 1000ms",
							"pm.test(\"Response time is less than 1000ms\", function(){",
							"    pm.expect(pm.response.responseTime).to.be.below(1000);",
							"});",
							"//9. There is a spesific header in the response",
							"pm.test(\"There is a spesific header in the response\", function(){",
							"    pm.response.to.have.header(\"Content-Type\");",
							"});",
							"//10. The response has a specific header with a specific value",
							"pm.test(\"The response has a specific header with a specific value\", function(){",
							"    pm.response.to.be.header(\"Content-Type\", \"application/json\");",
							"});",
							"//11. Cookie exists",
							"pm.test(\"Cookie exists\", function(){",
							"    pm.cookies.has(\"__cfduid\");",
							"});",
							"//12. Cookie has value",
							"pm.test(\"Cookie has values\", function(){",
							"   try{",
							"       var MY_COOKIE = pm.cookies.get(\"__cfduid\");",
							"       console.log(MY_COOKIE);",
							"   } catch(e){",
							"       console.log('SOME PROBLEM WITH COOKIE =>' + e)",
							"   }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://swapi.co/api/",
					"protocol": "https",
					"host": [
						"swapi",
						"co"
					],
					"path": [
						"api",
						""
					]
				},
				"description": "main_test"
			},
			"response": []
		},
		{
			"name": "https://b4527f50-5b28-495a-8b10-6538d043e14b.mock.pstmn.io",
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://b4527f50-5b28-495a-8b10-6538d043e14b.mock.pstmn.io",
					"protocol": "https",
					"host": [
						"b4527f50-5b28-495a-8b10-6538d043e14b",
						"mock",
						"pstmn",
						"io"
					]
				}
			},
			"response": [
				{
					"name": "https://b4527f50-5b28-495a-8b10-6538d043e14b.mock.pstmn.io",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"name\": \"Marina\"}"
						},
						"url": {
							"raw": "https://b4527f50-5b28-495a-8b10-6538d043e14b.mock.pstmn.io/action",
							"protocol": "https",
							"host": [
								"b4527f50-5b28-495a-8b10-6538d043e14b",
								"mock",
								"pstmn",
								"io"
							],
							"path": [
								"action"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Encoding",
							"value": "gzip"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Thu, 02 Apr 2020 20:07:07 GMT"
						},
						{
							"key": "ETag",
							"value": "W/\"a4-7hO0T/XLq3TuFViTu2ZVQQdIY+A\""
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						},
						{
							"key": "X-RateLimit-Limit",
							"value": "120"
						},
						{
							"key": "X-RateLimit-Remaining",
							"value": "118"
						},
						{
							"key": "X-RateLimit-Reset",
							"value": "1585857747"
						},
						{
							"key": "x-srv-span",
							"value": "v=1;s=d6545965f1071518"
						},
						{
							"key": "x-srv-trace",
							"value": "v=1;t=483eef576ce95e64"
						},
						{
							"key": "Content-Length",
							"value": "73"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						}
					],
					"cookie": [],
					"body": "{\n    \"status\": {\n        \"name\": \"Marina\",\n        \"success\": \"created\",\n        \"message\": \"success\"\n    }\n}"
				},
				{
					"name": "https://b4527f50-5b28-495a-8b10-6538d043e14b.mock.pstmn.io",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://b4527f50-5b28-495a-8b10-6538d043e14b.mock.pstmn.io",
							"protocol": "https",
							"host": [
								"b4527f50-5b28-495a-8b10-6538d043e14b",
								"mock",
								"pstmn",
								"io"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Encoding",
							"value": "gzip"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Thu, 02 Apr 2020 20:01:43 GMT"
						},
						{
							"key": "ETag",
							"value": "W/\"a4-7hO0T/XLq3TuFViTu2ZVQQdIY+A\""
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						},
						{
							"key": "X-RateLimit-Limit",
							"value": "120"
						},
						{
							"key": "X-RateLimit-Remaining",
							"value": "118"
						},
						{
							"key": "X-RateLimit-Reset",
							"value": "1585857747"
						},
						{
							"key": "x-srv-span",
							"value": "v=1;s=d6545965f1071518"
						},
						{
							"key": "x-srv-trace",
							"value": "v=1;t=483eef576ce95e64"
						},
						{
							"key": "Content-Length",
							"value": "140"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						}
					],
					"cookie": [],
					"body": "{\n    \"status\": {\n        \"name\": \"test\",\n        \"message\": \"success\"\n    }\n}"
				}
			]
		},
		{
			"name": "https://b4527f50-5b28-495a-8b10-6538d043e14b.mock.pstmn.io",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"name\": \"Marina\"}"
				},
				"url": {
					"raw": "https://b4527f50-5b28-495a-8b10-6538d043e14b.mock.pstmn.io/action",
					"protocol": "https",
					"host": [
						"b4527f50-5b28-495a-8b10-6538d043e14b",
						"mock",
						"pstmn",
						"io"
					],
					"path": [
						"action"
					]
				}
			},
			"response": [
				{
					"name": "https://b4527f50-5b28-495a-8b10-6538d043e14b.mock.pstmn.io",
					"originalRequest": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"name\": \"Marina\"}"
						},
						"url": {
							"raw": "https://b4527f50-5b28-495a-8b10-6538d043e14b.mock.pstmn.io/action",
							"protocol": "https",
							"host": [
								"b4527f50-5b28-495a-8b10-6538d043e14b",
								"mock",
								"pstmn",
								"io"
							],
							"path": [
								"action"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Encoding",
							"value": "gzip"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Thu, 02 Apr 2020 20:07:07 GMT"
						},
						{
							"key": "ETag",
							"value": "W/\"a4-7hO0T/XLq3TuFViTu2ZVQQdIY+A\""
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						},
						{
							"key": "X-RateLimit-Limit",
							"value": "120"
						},
						{
							"key": "X-RateLimit-Remaining",
							"value": "118"
						},
						{
							"key": "X-RateLimit-Reset",
							"value": "1585857747"
						},
						{
							"key": "x-srv-span",
							"value": "v=1;s=d6545965f1071518"
						},
						{
							"key": "x-srv-trace",
							"value": "v=1;t=483eef576ce95e64"
						},
						{
							"key": "Content-Length",
							"value": "73"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						}
					],
					"cookie": [],
					"body": "{\n    \"status\": {\n        \"name\": \"Marina\",\n        \"success\": \"created\",\n        \"message\": \"success\"\n    }\n}"
				},
				{
					"name": "https://b4527f50-5b28-495a-8b10-6538d043e14b.mock.pstmn.io",
					"originalRequest": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://b4527f50-5b28-495a-8b10-6538d043e14b.mock.pstmn.io",
							"protocol": "https",
							"host": [
								"b4527f50-5b28-495a-8b10-6538d043e14b",
								"mock",
								"pstmn",
								"io"
							]
						}
					},
					"status": "Not Found",
					"code": 404,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Access-Control-Allow-Origin",
							"value": "*"
						},
						{
							"key": "Content-Encoding",
							"value": "gzip"
						},
						{
							"key": "Content-Type",
							"value": "application/json; charset=utf-8"
						},
						{
							"key": "Date",
							"value": "Thu, 02 Apr 2020 20:01:43 GMT"
						},
						{
							"key": "ETag",
							"value": "W/\"a4-7hO0T/XLq3TuFViTu2ZVQQdIY+A\""
						},
						{
							"key": "Server",
							"value": "nginx"
						},
						{
							"key": "Vary",
							"value": "Accept-Encoding"
						},
						{
							"key": "X-RateLimit-Limit",
							"value": "120"
						},
						{
							"key": "X-RateLimit-Remaining",
							"value": "118"
						},
						{
							"key": "X-RateLimit-Reset",
							"value": "1585857747"
						},
						{
							"key": "x-srv-span",
							"value": "v=1;s=d6545965f1071518"
						},
						{
							"key": "x-srv-trace",
							"value": "v=1;t=483eef576ce95e64"
						},
						{
							"key": "Content-Length",
							"value": "140"
						},
						{
							"key": "Connection",
							"value": "keep-alive"
						}
					],
					"cookie": [],
					"body": "{\n    \"status\": {\n        \"name\": \"test\",\n        \"message\": \"success\"\n    }\n}"
				}
			]
		}
	],
	"protocolProfileBehavior": {}
}